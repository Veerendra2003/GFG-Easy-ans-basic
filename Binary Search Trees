/*
Binary Search Trees
EasyAccuracy: 48.29%Submissions: 567+Points: 2
Lamp
Are You Lost Solving Too Many Random Problems? Try these Problems & Accelerate towards your Goal!

Given an array of integers in[] representing inorder traversal of elements of a binary tree. Return true if the given inorder traversal can be of a valid Binary Search Tree.

Note - All the keys in BST must be unique

 

Example 1:

Input: in = [8, 14, 45, 64, 100]
Output: True
Example 2:

Input: in[] = [5, 6, 1, 8, 7]
Output: False
 

Your Task:

Complete the function isBSTTraversal() which takes an integer array in[] as input and return true if the traversal represents a BST.

 

Expected Time Complexity: O(n)

Expected Space Complexity: O(1)*/

==============================================================================================

solution in java:
================


//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.math.*;
import java.io.*;

class GFG {
  public static void main(String[] args) throws IOException {
    Scanner sc = new Scanner(System.in);
    int T = sc.nextInt();
    while (T-- > 0) {
      int n = sc.nextInt();
      int a[] = new int[n];
      for(int i=0;i<n;i++){
        a[i]=sc.nextInt();
      }
      Solution obj = new Solution();
      boolean ans = obj.isBSTTraversal(a);
      System.out.println(ans?"True":"False");
    }
  }
}

// } Driver Code Ends


//User function Template for Java

class Solution {
    static boolean isBSTTraversal(int nums[]) {
    // code here
    for(int i=0; i<nums.length-1; i++)
    {
        if(nums[i]<nums[i+1])
         continue;
        return false;
    }
    return true;

  }
}
     
