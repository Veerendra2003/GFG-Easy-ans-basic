/*
Compare two linked lists
EasyAccuracy: 54.29%Submissions: 21K+Points: 2
Lamp
Don't Miss Out on the Chance to Work with Leading Companies! Visit the GFG Job Fair Now!  

Given two string, represented as linked lists (every character is a node->data in the linked list). Write a function compare() that works similar to strcmp(), i.e., it returns 0 if both strings are same, 1 if first linked list is lexicographically greater, and -1 if second is lexicographically greater.

Input:
First line of input contains number of testcases T. For each testcase, there will be 4 lines of input. First line of which contains length of first linked list and next line contains the linked list, similarly next two lines contains length and linked list respectively.

Output:
Comapare two strings represented as linked list.

User Task:
The task is to complete the function compare() which compares the strings through linked list and returns 0, 1 or -1 accordingly.

Constraints:
1 <= T <= 100
1 <= N, M <= 100

Example:
Input:
2
5
a b a b a
4
a b a a
3
a a b
3
a a b

Output:
1
0

Explanation:
Testcase 1: String consisting of nodes of first linked list is lexicographically greater than the second one. So, the result is 1.
*/
==============================================================================================================================================================
SOLUTION IN JAVA:
===================
//{ Driver Code Starts
import java.util.*;
class Node {
        char data;
        Node next;
 
        // Constructor to create a new node
        Node(char d) 
        {
            data = d;
            next = null;
        }
    }
  class LinkedList_Compare
   {
    Node head;
	
	public void addToTheLast(Node node)
	{
		if (head == null) 
		{
		   head = node;
		} else 
		{
		   Node temp = head;
		   while (temp.next != null)
			temp = temp.next;

		   temp.next = node;
		}
	}
 
	 public static void main(String args[])
    {
       
         
        /* Constructed Linked List is 1->2->3->4->5->6->
           7->8->8->9->null */
         Scanner sc = new Scanner(System.in);
		 int t=sc.nextInt();
		 
		 while(t>0)
         {
			 LinkedList_Compare llist1 = new LinkedList_Compare();
			 LinkedList_Compare llist2 = new LinkedList_Compare();
			int n1 = sc.nextInt();
			
			int value = 0;
			
					char a1=sc.next().charAt(0);
							Node head1= new Node(a1);
							llist1.addToTheLast(head1);
							
							for (int i = 1; i < n1; i++) 
							{
									char a = sc.next().charAt(0); 
									llist1.addToTheLast(new Node(a));
								 
							}
			    
			
				int n2 = sc.nextInt();
						char b1=sc.next().charAt(0);
						Node head2 = new Node(b1);
						llist2.addToTheLast(head2);
						 
						for (int i = 1; i < n2; i++) 
						{
							//int b;
							
							 char b = sc.next().charAt(0); 
							llist2.addToTheLast(new Node(b));
						}
 
        //int value=0;
        GfG g = new GfG();
        value = g.compare(llist1.head, llist2.head);
        System.out.println(value);
	t--;
    }
    
}}
// } Driver Code Ends


/*  Structure of Node
class Node
 {
    char data;
    Node next;
 
    // Constructor to create a new node
    Node(char d) 
    {
       data = d;
       next = null;
    }
 }*/

class GfG
{
    int compare(Node node1, Node node2)
    {
      //Your code here
      while(node1!=null && node2!=null){
          if(node1.data==node2.data)
          {
              node1 = node1.next;
              node2 = node2.next;
          }
          else
            break;
          
      }
      if(node1==null && node2==null)
      return 0;
      if(node1.data>node2.data)
      return 1;
      return -1;
      
      
    }
}
