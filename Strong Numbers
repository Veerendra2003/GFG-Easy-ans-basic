/*
Strong Numbers
BasicAccuracy: 61.3%Submissions: 8K+Points: 1
Lamp
Are You Lost Solving Too Many Random Problems? Try these Problems & Accelerate towards your Goal!

Strong Numbers are the numbers whose sum of factorial of digits is equal to the original number. Given a number, the task is to check if it is a Strong Number or not.
 

Example 1:

Input: 145
Output: 1
Explanation: 1! + 4! + 5! = 145
Example 2:

Input: 5314
Output: 0
Explanation: 5! + 3! + 1! + 4! 
is not equal to 5314.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function is_StrongNumber() which takes the number as input parameter and returns 1 if it is Strong Number otherwise returns 0.
 

Expected Time Complexity : O(Number of digits in N)
Expected Space Complexity: O(1)
 

Constraints:
1 <= n <= 10000*/

=============================================================================
SOLUTION IN JAVA:
=================
//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            Solution ob = new Solution();
            int ans = ob.is_StrongNumber(n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    public int is_StrongNumber(int n)
    {
        // Code here
        int x = n;
        int sum=0;
        while(x>0)
        {
            int y = x%10;
            int fact = 1;
            while(y>1)
                fact = fact*y--;
            
            sum = sum+fact;
            x = x/10;
        }
        if(sum == n)
        return 1;
        return 0;
    }
}
